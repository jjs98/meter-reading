name: Build and Test
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-frontend:
    name: Run Pnpm Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v9
        with:
          no-frozen-lockfile: true

      - name: Build client
        run: pnpm build
        
  lint-frontend:
    name: Run linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v9
        with:
          no-frozen-lockfile: true
        
      - name: Run linting
        run: pnpm lint
        
  audit-frontend:
    name: Run audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: jjs98/pnpm-install-action@v9
        with:
          no-frozen-lockfile: true
        
      - name: Run audit
        run: pnpm audit

  # playwright-frontend:
  #   name: Run playwright tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Install pnpm
  #       uses: jjs98/pnpm-install-action@v9
  #       with:
  #         no-frozen-lockfile: true
        
  #     - name: Install Playwright Browsers
  #       run: pnpm pw:install

  #     - name: Run Playwright tests
  #       run: pnpm pw

  #     - uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report
  #         retention-days: 10

  docker-frontend:
    name: Build and push docker image
    needs: [build, lint, audit]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        platform:
          - linux/arm64v8
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: jjs98/meter-reading-client

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: jjs98/meter-reading-client:latest
          platforms: linux/arm64v8

  build-backend:
    name: Build API
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Build API
        run: dotnet build ./server/MeterReading.Api/MeterReading.Api.csproj

  test-backend:
    name: Test API
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Test API
        run: dotnet test ./server/MeterReading.Api.Tests/MeterReading.Api.Tests.csproj

  docker-backend:
    name: Build and push docker image
    needs: [build-backend, test-backend]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 8.0.x

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: jjs98/meter-reading-api:latest
          platforms: linux/arm64v8
    
